from calculations.performance_metrics.calculate_vulnerability import calculate_vulnerability
from utils.helpers import write_single_dict_to_csv


class Vulnerability:

    """Calculate Vulnerability for multiple datasets

    limits: {
           func_0: {
               lower_limit: string
               upper_limit: string
           }
       }

    vulnerability: [value] 
           value: {
               file_name: string
               value: {
                   func0: float
                   func1: float
               }
    user_inputs: {
            fun_0: {
              bioperiod_start_date: string, 
              bioperiod_end_date: string, 
            }



    """

    def __init__(self, limits, inputs, datasets):
        self.limits = limits
        self.inputs = inputs
        self.datasets = datasets
        self.vulnerability = []

        self.calc_vulnerability()

        self.save_csv()

    def calc_vulnerability(self):

        for dataset in self.datasets:
            value = {}
            for func in self.inputs:

                scenario_matrix = dataset['scenarios'][func]['magnitude']

                percentile_matrix = dataset['optimal'][func]['percentiles']

                vulnerability = calculate_vulnerability(
                    {'scenario': scenario_matrix, 'percentile': percentile_matrix}, self.limits[func], self.inputs[func])

                value.update({func: vulnerability})

            self.vulnerability.append(
                {'file_name': dataset['file_name'], 'value': value})

    def save_csv(self):
        folder_path = "files_output/performance_metrics/"

        for data in self.vulnerability:
            file_path = folder_path + \
                data["file_name"] + "_vulnerability.csv"
            write_single_dict_to_csv(data['value'], file_path)
